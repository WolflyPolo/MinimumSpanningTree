/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Point;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ColombiaWP
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    int raiz[];
    String cadena;
    int id;
    ArrayList<Nodo> marked;
    Graphics g;
    ArrayList<Nodo> nodos;
    ArrayList<Nodo> nodosinclu;
    ArrayList<Lado> lados;
    ArrayList<Lado> ladosinclu;

    public Principal() {
        initComponents();
        id = 0;
        g = getGraphics();
        nodos = new ArrayList();
        marked = new ArrayList();
        lados = new ArrayList();
        ladosinclu = new ArrayList();
        nodosinclu = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        textArea1 = new java.awt.TextArea();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Minimum Spanning Tree - Samuel Polo");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 5));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );

        jButton1.setText("MST");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Verificar Nodos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Verificar Lados");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        textArea1.setEditable(false);

        jButton4.setText("Borrar Grafo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton1)
                                .addGap(36, 36, 36)
                                .addComponent(jButton2)
                                .addGap(44, 44, 44)
                                .addComponent(jButton3)
                                .addGap(61, 61, 61)
                                .addComponent(jButton4)))
                        .addGap(0, 198, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        //BETA
        Limpieza();
        Point p = MouseInfo.getPointerInfo().getLocation();
        System.out.println(p);
        if (!nodos.isEmpty()) {
            int sw = 0;
            for (int i = 0; i < nodos.size(); i++) {
                if (p.x > nodos.get(i).getPosx1() && p.x < nodos.get(i).getPosx2()
                        && p.y > nodos.get(i).getPosy1() && p.y < nodos.get(i).getPosy2()) {
                    nodos.get(i).CambiaMarcador();
                    if (nodos.get(i).isIsMarked() == true) {
                        marked.add(nodos.get(i));
                        g.setColor(Color.yellow);
                        g.drawOval(nodos.get(i).getPosx1(), nodos.get(i).getPosy1(), 30, 30);
                    } else {
                        marked.remove(nodos.get(i));
                        g.setColor(Color.RED);
                        g.drawOval(nodos.get(i).getPosx1(), nodos.get(i).getPosy1(), 30, 30);
                    }
                    sw = 1;
                    System.out.println("Se ha marcado el nodo: " + nodos.get(i).getId() + " a estado: " + nodos.get(i).isIsMarked());
                }
            }
            if (sw != 1) {
                //BETA
                //Point p = MouseInfo.getPointerInfo().getLocation();
                //System.out.println("Click en x: "+p.x+" | Click en y: "+p.y); //Verificar la posición del Click.

                int posx1 = (p.x) - 15; //Posiciones de lado X anterior al centro.
                int posy1 = (p.y) - 15; //Posiciones de lado Y anterior al centro.
                Nodo n = new Nodo(id, p.x, p.y, posx1, posy1, posx1 + 30, posy1 + 30, false); //Se crea un nuevo nodo.
                //g.setColor(Color.RED);
                //g.drawOval(posx1, posy1, 30, 30); //Dibuja el óvalo con centro donde se hizo el click.
                nodos.add(n);
                n.DibujarVertice(g);
                //MarcarNodo(p.x, p.y);
                System.out.println("Nodo: " + n.getId() + " con centro posx: " + n.getPosx0() + " posy: " + n.getPosy0());
                id++;
            }
        } else {
            int posx1 = (p.x) - 15; //Posiciones de lado X anterior al centro.
            int posy1 = (p.y) - 15; //Posiciones de lado Y anterior al centro.
            Nodo n = new Nodo(id, p.x, p.y, posx1, posy1, posx1 + 30, posy1 + 30, false); //Se crea un nuevo nodo.
            //g.setColor(Color.RED);
            //g.drawOval(posx1, posy1, 30, 30); //Dibuja el óvalo con centro donde se hizo el click.
            nodos.add(n);
            n.DibujarVertice(g);
            //MarcarNodo(p.x, p.y);
            System.out.println("Nodo: " + n.getId() + " con centro posx: " + n.getPosx0() + " posy: " + n.getPosy0());
            id++;
        }
        UnirNodos();

    }//GEN-LAST:event_jPanel1MouseClicked

    public void DibujarLineas(int nodo1, int nodo2) {
        g.setColor(Color.YELLOW);
        g.drawLine(lados.get(nodo1).getNodo1().getPosx0(), lados.get(nodo1).getNodo1().getPosy0(), lados.get(nodo2).getNodo1().getPosx0(), lados.get(nodo2).getNodo1().getPosy0());
    }

    private int[][] MatrizAdyacencia() {
        int MatrizAd[][] = new int[nodos.size()][nodos.size()];
        for (int i = 0; i < nodos.size(); i++) {
            for (int j = 0; j < nodos.size(); j++) {
                MatrizAd[i][j] = 0;
            }
        }

        for (int i = 0; i < lados.size(); i++) {
            MatrizAd[lados.get(i).getNodo1().getId()][lados.get(i).getNodo2().getId()] = 1;
            MatrizAd[lados.get(i).getNodo2().getId()][lados.get(i).getNodo1().getId()] = 1;
        }
        //Escribir una matriz por consola.
        System.out.println("Matriz de Adyacencia: ");
        for (int x = 0; x < MatrizAd.length; x++) {
            System.out.print("|");
            for (int y = 0; y < MatrizAd[x].length; y++) {
                System.out.print(MatrizAd[x][y]);
                if (y != MatrizAd[x].length - 1) {
                    System.out.print("\t");
                }
            }
            System.out.println("|");
        }
        //-----------------------------------------------
        return MatrizAd;
    }

    private boolean BuscaVerticesIncluidos(int nodo) {
        if (nodosinclu.isEmpty() == true) {
            return false;
        } else {
            //Si no es vacío.
            int sw = 0;
            for (int i = 0; i < nodosinclu.size(); i++) {
                if (nodo == nodosinclu.get(i).getId()) {
                    sw = 1;
                }
            }
            if (sw == 0) {
                return false;
            } else {
                return true;
            }
        }
    }

    private void Insert_Sort(int vec[], int tam) {
        int y;
        int sw;
        int i;
        for (int k = 1; k <= tam - 1; k++) {
            y = vec[k];
            i = k - 1;
            sw = 0;
            while (i >= 0 && sw == 0) {
                if (y < vec[i]) {
                    vec[i + 1] = vec[i];
                    i = i - 1;
                } else {
                    sw = 1;
                }
            }
            vec[i + 1] = y;
        }
    }

    private void OrdenarLados(int vector[], int tam) {
        Insert_Sort(vector, tam); //Se llama al método Insert_Sort para ordenar el vector de menor a mayor.
    }

    private void UnirNodos() {
        if (marked.size() > 1 && marked.get(0) != marked.get(1)) {
            int sw = 0;
            String entradaTeclado = "";
            while (sw == 0) {
                entradaTeclado = JOptionPane.showInputDialog("Escribe el peso del lado.");
                if (!"".equals(entradaTeclado)) {
                    sw = 1;
                }
            }
            Lado l = new Lado(marked.get(0), marked.get(1), Integer.parseInt(entradaTeclado));
            lados.add(l);
            g.setColor(Color.RED);
            g.drawOval(marked.get(0).getPosx1(), marked.get(0).getPosy1(), 30, 30);
            g.drawOval(marked.get(1).getPosx1(), marked.get(1).getPosy1(), 30, 30);
            g.setColor(Color.BLACK);
            g.drawLine(marked.get(0).getPosx0(), marked.get(0).getPosy0(), marked.get(1).getPosx0(), marked.get(1).getPosy0());
            g.drawString(String.valueOf(l.getPeso()), (marked.get(0).getPosx0() + marked.get(1).getPosx0()) / 2, (marked.get(0).getPosy0() + marked.get(1).getPosy0()) / 2);
            System.out.println("Se ha creado un lado uniendo los nodos: " + l.getNodo1().getId() + " con: " + l.getNodo2().getId() + " con peso: " + l.getPeso()); //Verificar la creación de lados.
            marked.get(0).CambiaMarcador();
            marked.get(1).CambiaMarcador();
            marked.clear();
        }
    }

    private void Limpieza() {
        for (int i = 0; i < lados.size(); i++) {
            g.setColor(Color.BLACK);
            g.drawLine(lados.get(i).getNodo1().getPosx0(), lados.get(i).getNodo1().getPosy0(), lados.get(i).getNodo2().getPosx0(), lados.get(i).getNodo2().getPosy0());
        }
    }

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered

    }//GEN-LAST:event_jPanel1MouseEntered

    private void AlgoPrim3(int Matriz[][]) throws InterruptedException {
        //System.out.println("ALGORITMO DE PRIM");
        //LIMPIEZA
        Limpieza();
        nodosinclu.clear();
        ladosinclu.clear();
        //LIMPIEZA
        textArea1.append("ALGORITMO DE PRIM");
        textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
        Lado ladomenor = null;
        int j = 0;
        int nodo = (int) (Math.random() * nodos.size());
        //System.out.println("PRIMER NODO AL AZAR ELEGIDO: " + nodo);
        textArea1.append("PRIMER NODO AL AZAR ELEGIDO: " + nodo);
        textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
        nodosinclu.add(nodos.get(nodo));
        int aux = 0;
        int cont = 0;
        int vnuevo = 0;
        while (nodosinclu.size() < nodos.size()) {
            int menor = 999; //En cada iteración, se reinicia el valor menor.
            int sw = 0; // Switch para controlar la creación y agregación de nuevos lados.
            for (j = 0; j < nodosinclu.size(); j++) {
                for (int i = 0; i < nodos.size(); i++) {
                    if (Matriz[nodosinclu.get(j).getId()][i] == 1) {
                        Lado buscado = BuscarLado(nodosinclu.get(j).getId(), i);
                        boolean VerticeYaEsta = BuscaVerticesIncluidos(nodosinclu.get(j).getId());
                        boolean VerticeYaEsta2 = BuscaVerticesIncluidos(i);
                        if (buscado.getPeso() < menor && ((VerticeYaEsta == false) || (VerticeYaEsta2 == false))) {
                            if (VerticeYaEsta2 == false) {
                                vnuevo = i;
                            } else {
                                vnuevo = nodosinclu.get(j).getId();
                            }
                            menor = buscado.getPeso();
                            ladomenor = buscado;
                            sw = 1;
                        }
                    }
                }
            }
            if (sw == 1) {
                //System.out.println("El lado menor de los posibles es: " + ladomenor.getPeso());
                textArea1.append("El lado menor de los posibles es: " + ladomenor.getPeso());
                textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
                if (aux == 0) {
                    ladosinclu.add(ladomenor);
                    nodosinclu.add(nodos.get(vnuevo));
                    //System.out.println("Se ha incluido el lado: " + ladomenor.getPeso() + " que une al nuevo vértice: " + (vnuevo));
                    //System.out.println("Se han incluido los vértices: " + ladomenor.getNodo1().getId() + "; " + ladomenor.getNodo2().getId());
                    textArea1.append("Se ha incluido el lado: " + ladomenor.getPeso() + " que une al nuevo vértice: " + (vnuevo));
                    textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
                    textArea1.append("Se han incluido los vértices: " + ladomenor.getNodo1().getId() + "; " + ladomenor.getNodo2().getId());
                    textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
                    cont = cont + 2;
                    aux = 1;
                } else {
                    ladosinclu.add(ladomenor);
                    nodosinclu.add(nodos.get(vnuevo));
                    //System.out.println("Se ha incluido el lado: " + ladomenor.getPeso() + " que une al nuevo vértice: " + (vnuevo));
                    //System.out.println("Se han incluido los vértices: " + ladomenor.getNodo1().getId() + "; " + ladomenor.getNodo2().getId());
                    textArea1.append("Se ha incluido el lado: " + ladomenor.getPeso() + " que une al nuevo vértice: " + (vnuevo));
                    textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
                    textArea1.append("Se han incluido los vértices: " + ladomenor.getNodo1().getId() + "; " + ladomenor.getNodo2().getId());
                    textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
                    cont++;
                }
                g.setColor(Color.yellow);
                g.drawLine(ladomenor.getNodo1().getPosx0(), ladomenor.getNodo1().getPosy0(), ladomenor.getNodo2().getPosx0(), ladomenor.getNodo2().getPosy0());
                //System.out.println("Lado dibujado de peso: " + ladomenor.getPeso());
                textArea1.append("Lado dibujado de peso: " + ladomenor.getPeso());
                textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
            }
            textArea1.append("Elementos actuales en el arreglo de nodos incluidos: ");
            textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
            //System.out.println("Elementos actuales en el arreglo de nodos incluidos: ");
            /*
             for (int i = 0; i < nodosinclu.size(); i++) {
             System.out.println(nodosinclu.get(i).getId());
             }
             */
        }
        //Dibujar el árbol spanning.
        int sumaarbol = 0;
        for (int i = 0; i < ladosinclu.size(); i++) {
            g.setColor(Color.YELLOW);
            g.drawLine(ladosinclu.get(i).getNodo1().getPosx0(), ladosinclu.get(i).getNodo1().getPosy0(), ladosinclu.get(i).getNodo2().getPosx0(), ladosinclu.get(i).getNodo2().getPosy0());
            //System.out.println("Lado dibujado de peso: " + ladosinclu.get(i).getPeso());
            textArea1.append("Lado dibujado de peso: " + ladosinclu.get(i).getPeso());
            textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
            sumaarbol = ladosinclu.get(i).getPeso() + sumaarbol;
        }
        //System.out.println("Árbol de peso mínimo: " + sumaarbol);
        textArea1.append("Árbol de peso mínimo: " + sumaarbol);
        textArea1.append(System.getProperty("line.separator")); // Esto para el salto de línea
    }

    private Lado BuscarLado(int nodo1, int nodo2) {
        Lado ladobuscado = null;
        for (int i = 0; i < lados.size(); i++) {
            if (lados.get(i).getNodo1().getId() == nodo1 && lados.get(i).getNodo2().getId() == nodo2 || lados.get(i).getNodo1().getId() == nodo2 && lados.get(i).getNodo2().getId() == nodo1) {
                ladobuscado = lados.get(i);
            }
        }
        return ladobuscado;
    }

    private boolean EsConexo(int mat[][]) {
        int sw = 0;
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat.length; j++) {
                if (i != j) {
                    if (mat[i][j] == 0) {
                        sw = 1;
                    }
                }
            }
        }
        if (sw == 0) {
            return true;
        } else {
            return false;
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int Matriz[][] = MatrizAdyacencia();
        try {
            AlgoPrim3(Matriz);
        } catch (InterruptedException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JOptionPane.showMessageDialog(null, "Nodos totales: " + nodos.size(),
                "AVISO!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JOptionPane.showMessageDialog(null, "Lados totales: " + lados.size(),
                "AVISO!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        id = 0;
        nodosinclu.clear();
        ladosinclu.clear();
        nodos.clear();
        lados.clear();
        jPanel1.getGraphics().clearRect(1, 1, jPanel1.getWidth() - 2, jPanel1.getHeight() - 2);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame principal = new Principal();
                principal.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
